var colors = d3.scaleOrdinal(d3.schemeCategory10);
var dataJson = {nodes: {} , links: [] };

var svg = d3.select("svg"),
    width = +svg.attr("width"),
    height = +svg.attr("height"),
    node,
    link;

svg.append('defs').append('marker')
    .attrs({'id':'arrowhead',
        'viewBox':'-0 -5 10 10',
        'refX':13,
        'refY':0,
        'orient':'auto',
        'markerWidth':13,
        'markerHeight':13,
        'xoverflow':'visible'})
    .append('svg:path')
    .attr('d', 'M 0,-5 L 10 ,0 L 0,5')
    .attr('fill', '#999')
    .style('stroke','none');


var simulation = d3.forceSimulation()
    .force("link", d3.forceLink().id(function (d) {return d.id;}).distance(100).strength(1))
    .force("charge", d3.forceManyBody())
    .force("center", d3.forceCenter(width / 2, height / 2));


function update(links, nodes) {

    link = svg.selectAll(".link")
        .data(links, function(d){
            return {source: d.source, target: d.target, value: d.value};
        })
        .enter()
        .append("line")
        .attr("class", "link")
        .attr('marker-end','url(#arrowhead)')

    link.append("title")
        .text(function (d) {return d.value;});

    edgepaths = svg.selectAll(".edgepath")
        .data(links,function(d){
            return {source: d.source, target: d.target, value: d.value};
        })
        .enter()
        .append('path')
        .attrs({
            'class': 'edgepath',
            'fill-opacity': 0,
            'stroke-opacity': 0,
            'id': function (d, i) {return 'edgepath' + i}
        })
        .style("pointer-events", "none");

    edgelabels = svg.selectAll(".edgelabel")
        .data(links,function(d){
            return {source: d.source, target: d.target, value: d.value};
        })
        .enter()
        .append('text')
        .style("pointer-events", "none")
        .attrs({
            'class': 'edgelabel',
            'id': function (d, i) {return 'edgelabel' + i},
            'font-size': 10,
            'fill': '#aaa'
        });

    edgelabels.append('textPath')
        .attr('xlink:href', function (d, i) {return '#edgepath' + i})
        .style("text-anchor", "middle")
        .style("pointer-events", "none")
        .attr("startOffset", "50%")
        .text(function (d) {return d.value + 'BTC'});

    node = svg.selectAll(".node")
        .data(nodes, function(d){
                return { name: d.name, id: d.id};
            })
        .enter()
        .append("g")
        .attr("class", "node")
        .call(d3.drag()
                .on("start", dragstarted)
                .on("drag", dragged)
            //.on("end", dragended)
        );

    node.append("circle")
        .attr("r", 5)
        .style("fill", function (d, i) {return colors(i);})

    node.append("title")
        .text(function (d) {return d.id;});

    node.append("text")
        .attr("dy", -3)
        .text(function (d) {return d.name+":"+d.label;});

    simulation
        .nodes(nodes)
        .on("tick", ticked);

    simulation.force("link")
        .links(links);
}


var updateGraph = function(data) {


    var parsedTree = parseData(data);


    for(var i = 0; i < parsedTree.length; i++){
        var pLink = parsedTree[i];
        (!dataJson.nodes[pLink.source]) ? dataJson.nodes[pLink.source] = {name: pLink.source, id: Object.keys(dataJson.nodes).length++ } : null;
        (!dataJson.nodes[pLink.target]) ? dataJson.nodes[pLink.target] = {name: pLink.target, id: Object.keys(dataJson.nodes).length++ } : null;
        dataJson.links.push({
            source: dataJson.nodes[pLink.source].id,
            target: dataJson.nodes[pLink.target].id,
            value: pLink.value
        });

    }

    update( dataJson.links , d3.values(dataJson.nodes));

}

function ticked() {

    link
        .attr("x1", function (d) {return d.source.x;})
        .attr("y1", function (d) {return d.source.y;})
        .attr("x2", function (d) {return d.target.x;})
        .attr("y2", function (d) {return d.target.y;});

    node
        .attr("transform", function (d) {return "translate(" + d.x + ", " + d.y + ")";});

    edgepaths.attr('d', function (d) {
        return 'M ' + d.source.x + ' ' + d.source.y + ' L ' + d.target.x + ' ' + d.target.y;
    });

    edgelabels.attr('transform', function (d) {
        if (d.target.x < d.source.x) {
            var bbox = this.getBBox();

            rx = bbox.x + bbox.width / 2;
            ry = bbox.y + bbox.height / 2;
            return 'rotate(180 ' + rx + ' ' + ry + ')';
        }
        else {
            return 'rotate(0)';
        }
    });
}

function dragstarted(d) {
    if (!d3.event.active) simulation.alphaTarget(0.3).restart()
    d.fx = d.x;
    d.fy = d.y;
}

function dragged(d) {
    d.fx = d3.event.x;
    d.fy = d3.event.y;
}

var parseData = function(data){

    var parsedTree = [];

    if(data){
        try{

            var json = JSON.parse(data);

            if(json.transactionInputs.length > 0 ){

                var source = '';

                if(json.transactionInputs.length == 1){
                    source = json.transactionInputs[0];
                } else {
                    var src = '';
                    for(txi in json.transactionInputs){
                        src += json.transactionInputs[txi] + '-';
                    }
                    source = src;
                }

                for(var t = 0; t < json.transactionDBOutputs.length; t++){
                    var trident = {source: source, target: '', value: ''};
                    var currentTX = json.transactionDBOutputs[t];
                    trident.target = currentTX.hash;
                    trident.value = currentTX.value.toString();
                    parsedTree.push(trident);
                    console.info('New trident ' + JSON.stringify(trident));
                }

            }

        } catch (e) {
            console.info('Error parsing data from websocket');
        }

    }

    return parsedTree;
}